import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/internal/Subject';
import { PaletteModel } from '../models/palette.model';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import * as i0 from "@angular/core";
export class PalettePickerService {
    constructor() {
        this.ColorPickerChanged = new BehaviorSubject(new PaletteModel());
        this.ColorPickerClosed = new Subject();
    }
    PalettePickerChange(params) {
        this.CurrentPalette = Object.assign({}, params);
        this.ColorPickerChanged.next(this.CurrentPalette);
    }
    /**
     * Event when color picker is closed, use this to kick off
     * the process of building color variants and everything else
     * Doing this prevents multiple processes that occur during
     * Form Control changes
     *
     * @param params Selected color from color picker
     */
    CloseColorPicker(params) {
        this.ColorPickerClosed.next(params);
    }
}
PalettePickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PalettePickerService_Factory() { return new PalettePickerService(); }, token: PalettePickerService, providedIn: "root" });
PalettePickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PalettePickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbW1vbi9zcmMvbGliL3NlcnZpY2VzL3BhbGV0dGUtcGlja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7QUFRaEUsTUFBTSxPQUFPLG9CQUFvQjtJQWdDN0I7UUFDSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxlQUFlLENBQWUsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0lBQ2hELENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxNQUFvQjtRQUUzQyxJQUFJLENBQUMsY0FBYyxxQkFBUSxNQUFNLENBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBQyxjQUFjLENBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLGdCQUFnQixDQUFDLE1BQWM7UUFFbEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsQ0FBQztJQUMxQyxDQUFDOzs7O1lBM0RKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvaW50ZXJuYWwvU3ViamVjdCc7XHJcbmltcG9ydCB7IFBhbGV0dGVNb2RlbCB9IGZyb20gJy4uL21vZGVscy9wYWxldHRlLm1vZGVsJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcy9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QnO1xyXG5pbXBvcnQgeyBDb2xvck1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2NvbG9yLm1vZGVsJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBQYWxldHRlUGlja2VyU2VydmljZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIENvbG9yUGlja2VyQ2hhbmdlZDogU3ViamVjdDxQYWxldHRlTW9kZWw+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgYWZ0ZXIgY29sb3IgcGlja2VyIGhhcyBjbG9zZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIENvbG9yUGlja2VyQ2xvc2VkOiBTdWJqZWN0PGFueT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXJyZW50IGNvbG9yIHBhbGV0dGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIEN1cnJlbnRQYWxldHRlOiBQYWxldHRlTW9kZWw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiBwcmltYXJ5IGNvbG9yc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgUHJpbWFyeUNvbG9yUGFsZXR0ZTogQXJyYXk8Q29sb3JNb2RlbD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnJheSBvZiBhY2NlbnQgY29sb3JzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBBY2NlbnRDb2xvclBhbGV0dGU6IEFycmF5PENvbG9yTW9kZWw+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2Ygd2FybiBjb2xvcnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIFdhcm5Db2xvclBhbGV0dGU6IEFycmF5PENvbG9yTW9kZWw+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuQ29sb3JQaWNrZXJDaGFuZ2VkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxQYWxldHRlTW9kZWw+KG5ldyBQYWxldHRlTW9kZWwoKSk7XHJcbiAgICAgICAgdGhpcy5Db2xvclBpY2tlckNsb3NlZCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUGFsZXR0ZVBpY2tlckNoYW5nZShwYXJhbXM6IFBhbGV0dGVNb2RlbCk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLkN1cnJlbnRQYWxldHRlID0geyAuLi5wYXJhbXMgfTtcclxuICAgICAgICB0aGlzLkNvbG9yUGlja2VyQ2hhbmdlZC5uZXh0KCB0aGlzLkN1cnJlbnRQYWxldHRlICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB3aGVuIGNvbG9yIHBpY2tlciBpcyBjbG9zZWQsIHVzZSB0aGlzIHRvIGtpY2sgb2ZmXHJcbiAgICAgKiB0aGUgcHJvY2VzcyBvZiBidWlsZGluZyBjb2xvciB2YXJpYW50cyBhbmQgZXZlcnl0aGluZyBlbHNlXHJcbiAgICAgKiBEb2luZyB0aGlzIHByZXZlbnRzIG11bHRpcGxlIHByb2Nlc3NlcyB0aGF0IG9jY3VyIGR1cmluZ1xyXG4gICAgICogRm9ybSBDb250cm9sIGNoYW5nZXNcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHBhcmFtcyBTZWxlY3RlZCBjb2xvciBmcm9tIGNvbG9yIHBpY2tlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgQ2xvc2VDb2xvclBpY2tlcihwYXJhbXM6IHN0cmluZyk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLkNvbG9yUGlja2VyQ2xvc2VkLm5leHQoIHBhcmFtcyApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==