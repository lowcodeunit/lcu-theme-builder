import { Injectable } from '@angular/core';
import { PaletteModel } from '../models/palette.model';
import { BehaviorSubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PalettePickerService {
    constructor() {
        this.ColorPickerChanged = new BehaviorSubject(new PaletteModel());
        this.ColorPickerClosed = new Subject();
    }
    PalettePickerChange(params) {
        this.CurrentPalette = Object.assign({}, params);
        this.ColorPickerChanged.next(this.CurrentPalette);
    }
    /**
     * Event when color picker is closed, use this to kick off
     * the process of building color variants and everything else
     * Doing this prevents multiple processes that occur during
     * Form Control changes
     *
     * @param params Selected color from color picker
     */
    CloseColorPicker(params) {
        this.ColorPickerClosed.next(params);
    }
}
PalettePickerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PalettePickerService_Factory() { return new PalettePickerService(); }, token: PalettePickerService, providedIn: "root" });
PalettePickerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PalettePickerService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbW1vbi9zcmMvbGliL3NlcnZpY2VzL3BhbGV0dGUtcGlja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBTWhELE1BQU0sT0FBTyxvQkFBb0I7SUFnQzdCO1FBQ0ksSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksZUFBZSxDQUFlLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQUNoRCxDQUFDO0lBRU0sbUJBQW1CLENBQUMsTUFBb0I7UUFFM0MsSUFBSSxDQUFDLGNBQWMscUJBQVEsTUFBTSxDQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsY0FBYyxDQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxnQkFBZ0IsQ0FBQyxNQUFjO1FBRWxDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUUsTUFBTSxDQUFFLENBQUM7SUFDMUMsQ0FBQzs7OztZQTNESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhbGV0dGVNb2RlbCB9IGZyb20gJy4uL21vZGVscy9wYWxldHRlLm1vZGVsJztcclxuaW1wb3J0IHsgQ29sb3JNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb2xvci5tb2RlbCc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGFsZXR0ZVBpY2tlclNlcnZpY2Uge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDb2xvclBpY2tlckNoYW5nZWQ6IFN1YmplY3Q8UGFsZXR0ZU1vZGVsPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGFmdGVyIGNvbG9yIHBpY2tlciBoYXMgY2xvc2VkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDb2xvclBpY2tlckNsb3NlZDogU3ViamVjdDxhbnk+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCBjb2xvciBwYWxldHRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBDdXJyZW50UGFsZXR0ZTogUGFsZXR0ZU1vZGVsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgcHJpbWFyeSBjb2xvcnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIFByaW1hcnlDb2xvclBhbGV0dGU6IEFycmF5PENvbG9yTW9kZWw+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyYXkgb2YgYWNjZW50IGNvbG9yc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgQWNjZW50Q29sb3JQYWxldHRlOiBBcnJheTxDb2xvck1vZGVsPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFycmF5IG9mIHdhcm4gY29sb3JzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBXYXJuQ29sb3JQYWxldHRlOiBBcnJheTxDb2xvck1vZGVsPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLkNvbG9yUGlja2VyQ2hhbmdlZCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UGFsZXR0ZU1vZGVsPihuZXcgUGFsZXR0ZU1vZGVsKCkpO1xyXG4gICAgICAgIHRoaXMuQ29sb3JQaWNrZXJDbG9zZWQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFBhbGV0dGVQaWNrZXJDaGFuZ2UocGFyYW1zOiBQYWxldHRlTW9kZWwpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5DdXJyZW50UGFsZXR0ZSA9IHsgLi4ucGFyYW1zIH07XHJcbiAgICAgICAgdGhpcy5Db2xvclBpY2tlckNoYW5nZWQubmV4dCggdGhpcy5DdXJyZW50UGFsZXR0ZSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgd2hlbiBjb2xvciBwaWNrZXIgaXMgY2xvc2VkLCB1c2UgdGhpcyB0byBraWNrIG9mZlxyXG4gICAgICogdGhlIHByb2Nlc3Mgb2YgYnVpbGRpbmcgY29sb3IgdmFyaWFudHMgYW5kIGV2ZXJ5dGhpbmcgZWxzZVxyXG4gICAgICogRG9pbmcgdGhpcyBwcmV2ZW50cyBtdWx0aXBsZSBwcm9jZXNzZXMgdGhhdCBvY2N1ciBkdXJpbmdcclxuICAgICAqIEZvcm0gQ29udHJvbCBjaGFuZ2VzXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgU2VsZWN0ZWQgY29sb3IgZnJvbSBjb2xvciBwaWNrZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIENsb3NlQ29sb3JQaWNrZXIocGFyYW1zOiBzdHJpbmcpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgdGhpcy5Db2xvclBpY2tlckNsb3NlZC5uZXh0KCBwYXJhbXMgKTtcclxuICAgIH1cclxufVxyXG4iXX0=