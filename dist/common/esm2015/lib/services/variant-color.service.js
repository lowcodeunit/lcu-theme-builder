import { Injectable } from '@angular/core';
import * as tinycolor from 'tinycolor2';
import { PalettePickerService } from './palette-picker.service';
import { ThemeBuilderService } from './theme-builder.service';
import * as i0 from "@angular/core";
import * as i1 from "./palette-picker.service";
import * as i2 from "./theme-builder.service";
const tinyColor = tinycolor;
export class VariantColorService {
    constructor(palettePickerService, themeBuilderService) {
        this.palettePickerService = palettePickerService;
        this.themeBuilderService = themeBuilderService;
    }
    UpdatePrimaryVariants(color) {
        this.palettePickerService.PrimaryColorPalette = this.computeColors(color);
        for (const c of this.palettePickerService.PrimaryColorPalette) {
            const key = `--theme-primary-${c.name}`;
            const value = c.hex;
            const key2 = `--theme-primary-contrast-${c.name}`;
            const value2 = c.darkContrast ? 'rgba(black, 0.87)' : 'white';
            // set or update CSS variable values
            document.documentElement.style.setProperty(key, value);
            document.documentElement.style.setProperty(key2, value2);
        }
    }
    UpdateAccentVariants(color) {
        this.palettePickerService.AccentColorPalette = this.computeColors(color);
        for (const c of this.palettePickerService.AccentColorPalette) {
            const key = `--theme-accent-${c.name}`;
            const value = c.hex;
            const key2 = `--theme-primary-contrast-${c.name}`;
            const value2 = c.darkContrast ? 'rgba(black, 0.87)' : 'white';
            document.documentElement.style.setProperty(key, value);
            document.documentElement.style.setProperty(key2, value2);
        }
    }
    UpdateWarnVariants(color) {
        this.palettePickerService.WarnColorPalette = this.computeColors(color);
        for (const c of this.palettePickerService.WarnColorPalette) {
            const key = `--theme-warn-${c.name}`;
            const value = c.hex;
            const key2 = `--theme-primary-contrast-${c.name}`;
            const value2 = c.darkContrast ? 'rgba(black, 0.87)' : 'white';
            document.documentElement.style.setProperty(key, value);
            document.documentElement.style.setProperty(key2, value2);
        }
    }
    computeColors(color) {
        const baseLightColor = tinyColor('#ffffff');
        const baseDarkColor = this.themeBuilderService.multiply(tinyColor(color).toRgb(), tinyColor(color).toRgb());
        const [, , , baseTetrad] = tinyColor(color).tetrad();
        return [
            this.getColorObject(tinyColor.mix(baseLightColor, tinyColor(color), 12), '50'),
            this.getColorObject(tinyColor.mix(baseLightColor, tinyColor(color), 30), '100'),
            this.getColorObject(tinyColor.mix(baseLightColor, tinyColor(color), 50), '200'),
            this.getColorObject(tinyColor.mix(baseLightColor, tinyColor(color), 70), '300'),
            this.getColorObject(tinyColor.mix(baseLightColor, tinyColor(color), 85), '400'),
            this.getColorObject(tinyColor(color), '500'),
            this.getColorObject(tinyColor.mix(baseDarkColor, tinyColor(color), 87), '600'),
            this.getColorObject(tinyColor.mix(baseDarkColor, tinyColor(color), 70), '700'),
            this.getColorObject(tinyColor.mix(baseDarkColor, tinyColor(color), 54), '800'),
            this.getColorObject(tinyColor.mix(baseDarkColor, tinyColor(color), 25), '900'),
            this.getColorObject(tinyColor.mix(baseDarkColor, baseTetrad, 15).saturate(80).lighten(65), 'A100'),
            this.getColorObject(tinyColor.mix(baseDarkColor, baseTetrad, 15).saturate(80).lighten(55), 'A200'),
            this.getColorObject(tinyColor.mix(baseDarkColor, baseTetrad, 15).saturate(100).lighten(45), 'A400'),
            this.getColorObject(tinyColor.mix(baseDarkColor, baseTetrad, 15).saturate(100).lighten(40), 'A700')
        ];
    }
    // force change
    getColorObject(value, name) {
        const c = tinyColor(value);
        return {
            name,
            hex: c.toHexString(),
            darkContrast: c.isLight()
        };
    }
}
VariantColorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function VariantColorService_Factory() { return new VariantColorService(i0.ɵɵinject(i1.PalettePickerService), i0.ɵɵinject(i2.ThemeBuilderService)); }, token: VariantColorService, providedIn: "root" });
VariantColorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
VariantColorService.ctorParameters = () => [
    { type: PalettePickerService },
    { type: ThemeBuilderService }
];
//# sourceMappingURL=data:application/json;base64,