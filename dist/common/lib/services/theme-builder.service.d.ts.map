{"version":3,"file":"theme-builder.service.d.ts","sources":["theme-builder.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { UtilsService } from './utils.service';\r\nimport { VariantColorService } from './variant-color.service';\r\nimport { PalettePickerService } from './palette-picker.service';\r\nimport { LocalStorageService } from './local-storage.service';\r\nimport { MaterialPaletteModel } from './../models/material-palette.model';\r\nimport { NgZone } from '@angular/core';\r\nimport { PaletteModel } from '../models/palette.model';\r\nimport { Subject } from 'rxjs';\r\nimport { ThemeModel } from '../models/theme.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { PaletteListModel } from '../models/palette-list.model';\r\nimport { PaletteTemplateService } from './palette-template.service';\r\nimport { ThemePickerModel } from '../models/theme-picker.model';\r\nexport declare class ThemeBuilderService {\r\n    protected http: HttpClient;\r\n    protected paletteTemplateService: PaletteTemplateService;\r\n    protected localStorageService: LocalStorageService;\r\n    protected palettePickerService: PalettePickerService;\r\n    protected zone: NgZone;\r\n    protected utilsService: UtilsService;\r\n    protected variantColorService: VariantColorService;\r\n    /**\r\n     * Is it lightness\r\n     */\r\n    protected themeMode: boolean;\r\n    /**\r\n     * Theme Palette\r\n     */\r\n    protected palette: PaletteModel;\r\n    Theme: Subject<ThemeModel>;\r\n    PaletteColors: Subject<Partial<PaletteModel>>;\r\n    ThemeScss: Promise<void>;\r\n    PaletteList: Array<PaletteListModel>;\r\n    /**\r\n     * Palette colors, from 50 - A700\r\n     */\r\n    MaterialPaletteColors: MaterialPaletteModel;\r\n    /**\r\n     * _theming.scss from Angular Material\r\n     */\r\n    private _materialTheme;\r\n    set MaterialTheme(val: string);\r\n    get MaterialTheme(): string;\r\n    /**\r\n     * Set Palette colors\r\n     */\r\n    set Palette(palette: PaletteModel);\r\n    get Palette(): PaletteModel;\r\n    set ThemeMode(light: boolean);\r\n    get ThemeMode(): boolean;\r\n    Themes: Array<ThemePickerModel>;\r\n    constructor(http: HttpClient, paletteTemplateService: PaletteTemplateService, localStorageService: LocalStorageService, palettePickerService: PalettePickerService, zone: NgZone, utilsService: UtilsService, variantColorService: VariantColorService);\r\n    /**\r\n     * load intial theme\r\n     *\r\n     * Pulls _theming.scss from Angular Material and then overwrites it with\r\n     * our theme color changes\r\n     */\r\n    protected loadThemingScss(): Promise<void>;\r\n    /**\r\n     * Get theme template and update it\r\n     *\r\n     * @param theme current theme\r\n     */\r\n    GetTemplate(theme: ThemeModel): string;\r\n    /**\r\n     * Compile SASS to CSS\r\n     *\r\n     * @param theme SASS stylesheet\r\n     * @returns compiled CSS\r\n     */\r\n    CompileScssTheme(theme: string): Promise<string>;\r\n    /**\r\n     * Return primary and accent colors for each color map, from colors 50 - A700\r\n     *\r\n     * @param color color\r\n     */\r\n    GetPalette(color: string): MaterialPaletteModel;\r\n    /**\r\n     * emit event with theme\r\n     */\r\n    protected emit(): void;\r\n    /**\r\n     * Return a new theme model\r\n     */\r\n    getTheme(): ThemeModel;\r\n    UpdateTheme(theme: ThemeModel): void;\r\n    SetThemes(themes: Array<ThemePickerModel>): void;\r\n}\r\n"]}